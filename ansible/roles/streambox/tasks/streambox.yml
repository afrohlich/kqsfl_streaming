- name: test
  command: whoami

- name: test vars
  debug:
    msg: "{{stream_user_username}}"

- name: install basic management tools
  block:
    - name: install networking tools
      ansible.builtin.apt:
        pkg:
          - vim
          - screen
          - tmux
          - net-tools
        update_cache: true

- name: install docker
  block:
    - name: install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-setuptools
        state: latest
        update_cache: true

    - name: add an apt signing key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: install docker module for python
      pip:
        name: docker

- name: configure google drive sync
  block:
    - name: install dependencies
      ansible.builtin.apt:
        pkg: fuse3

    - name: create mount point
      file:
        path: /opt/kqsfl-stream/local-recording-backups
        state: directory


    - name: install rclone
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
      vars:
        rclone_version: "1.68.1"
        # Versions listed at https://github.com/rclone/rclone/releases


    - name: configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_configs:
          - name: gdrive-obs-oauth
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              client_id: "{{rclone_gdrive_client_id}}"
              client_secret: "{{rclone_gdrive_client_secret}}"
              token: "{{rclone_gdrive_oauth_token}}"
              description: connect to gdrive using oauth as a real authorized user
      when: rclone_gdrive_use_oauth

    - name: configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_configs:
          - name: gdrive-obs-sa
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              root_folder_id: 
              shared_with_me: true
              service_account_file: /home/stream-admin/.config/rclone/kqsfl-obs-service-account.json
              service_account_credentials: "{{rclone_gdrive_token}}"
              description: connect to gdrive using service account
      when: not rclone_gdrive_use_oauth

    - name: create 

    - name: Restart rclone
      ansible.builtin.systemd:
        name: rclone.service
        state: restarted
      when: setup_rclone_config.changed

- name: install obs studio
  # https://obsproject.com/kb/linux-installation
  block:
    - name: obs studio add apt repo
      ansible.builtin.apt_repository:
        repo: ppa:obsproject/obs-studio

    - name: obs studio install
      ansible.builtin.apt:
        update_cache: yes
        name: "obs-studio=30.2.3-0obsproject1~{{ ansible_distribution_release }}"
        # versions: https://launchpad.net/~obsproject/+archive/ubuntu/obs-studio

- name: install restreamer
  block:
  - name: install restreamer
    community.docker.docker_image:
      name: "datarhei/restreamer"
      tag: "latest"
      source: pull

  - name: configure and start restreamer
    debug: msg='configure restreamer'

- name: install reverse proxy tunnel for external access
  block:
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/
    
    - name: ngrok setup
      block:

        - name: download and install
          shell: <
            curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
              | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
              && echo "deb [trusted=yes] https://ngrok-agent.s3.amazonaws.com buster main" \
              | sudo tee /etc/apt/sources.list.d/ngrok.list \
              && sudo apt update \
              && sudo apt install ngrok


        - name: ngrok setup
          shell: <
            ngrok config add-authtoken 2oGosaQ5mCcHp6hk0YEZCQ8cBSF_7TNXna6mac1bz6jeELC66


    - name: cloudflared setup
      block:
        # https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/
        - name: get cloudflare repo apt key
          ansible.builtin.apt_key:
            url: https://pkg.cloudflare.com/cloudflare-main.gpg 
            state: present

        - name: cloudflared add apt repo remove
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared noble main"
            state: absent

        - name: cloudflared add apt repo
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared jammy main"
              # ubuntu 24 "noble" does not have an official release.
              # See github issue
              # Temporarily using 'jammy'
              # https://github.com/cloudflare/cloudflared/issues/1235

        - name: install cloudflared
          ansible.builtin.apt:
            name: cloudflared
            state: present
            update_cache: yes

        - name: create cloudflare tunnel config
          debug: msg='To Do'
          when: false

        - name: install cloudflare tunnel service
          shell: cloudflared install service
          when: false

- name: set up remote desktop software
  block:
    - name: xrdp setup
      block:

        - name: install xrdp
          ansible.builtin.apt:
            pkg: xrdp
            state: present

        - name: configure xrdp
          debug: msg="todo"  

    - name: x11vnc setup
      block:
        # https://github.com/LibVNC/x11vnc?tab=readme-ov-file#how-to-use-x11vnc
        - name: install x11vnc
          ansible.builtin.apt:
            pkg: x11vnc
            update_cache: yes

        - name: start x11vnc
          shell: |
            x11vnc -display :0


    - name: guac setup
      block:
        # This should be docker compose (https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html)
        # https://guacamole.apache.org/doc/1.5.5/gug/guacamole-docker.html#running-the-guacd-docker-image
      

        - name: prepare guacamole server
          script: files/guacamole-docker/prepare.sh

        - name: start guacamole docker cluster
          community.docker.docker_compose_v2:
            project_src: files/guacamole-docker         

        - name: setup connections
          script: files/guacamole-docker/configure_connections.sh
