- name: test
  command: whoami

- name: streambox create essential users
  tags: streambox create_users
  block:
    - name: streambox create admin user
      ansible.builtin.user:
        name: stream-admin
        shell: /bin/bash

    - name: streambox create admin user systemd directory
      # https://wiki.archlinux.org/title/Systemd/User
      ansible.builtin.file:
        path: "/home/stream-admin/.config/systemd/user/"
        state: directory
        owner: stream-admin

    - name: streambox create basic user
      ansible.builtin.user:
        name: stream-user
        shell: /bin/bash

    - name: streambox create basic user systemd directory
      ansible.builtin.file:
        path: "/home/stream-user/.config/systemd/user/"
        state: directory
        owner: stream-user

- name: streambox python extras
  block:
    - name: streambox install deadsnakes ppa
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa

    - name: streambox python3.9
      ansible.builtin.apt:
        pkg:
          - python3.9
        update_cache: true

- name: streambox configure desktop managers
  ansible.builtin.import_tasks: desktop_setup.yml

- name: streambox install basic management tools
  tags: install_basics
  block:
    - name: streambox install networking tools
      ansible.builtin.apt:
        pkg:
          - vim
          - screen
          - tmux
          - net-tools
        update_cache: true

    - name: streambox install system tools
      ansible.builtin.apt:
        pkg:
          - inotify-tools
          - dbus-x11
          - net-tools
        update_cache: true

- name: install docker
  tags: install_docker
  block:
    - name: streambox install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-setuptools
          - python3-pip
        state: latest
        update_cache: true

    - name: streambox add an apt signing key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: streambox add docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: streambox update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: streambox install docker module for python
      pip:
        name: docker

- name: streambox configure google drive sync for obs backups
  tags: configure_gdrive
  block:
    - name: streambox install rclone dependencies
      ansible.builtin.apt:
        pkg: fuse3

    - name: streambox install rclone
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
      vars:
        rclone_version: "{{streambox_rclone_version}}"
        # Versions listed at https://github.com/rclone/rclone/releases

    - name: streambox create mount point
      file:
        path: "{{streambox_rclone_gdrive_mount_point}}"
        state: directory
        owner: stream-admin

    - name: streambox configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_config_owner:
          OWNER: stream-admin
          GROUP: stream-admin
        rclone_config_location: "/home/stream-admin/.config/rclone/rclone.conf"
        rclone_configs:
          - name: gdrive-obs
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              root_folder_id: "{{streambox_rclone_gdrive_root_folder}}"
              client_id: "{{streambox_rclone_gdrive_client_id  | mandatory}}"
              client_secret: "{{streambox_rclone_gdrive_client_secret  | mandatory}}"
              token: "{{streambox_rclone_gdrive_oauth_token  | mandatory | to_json}}"
              description: connect to gdrive using oauth as a real authorized user
      when: streambox_rclone_gdrive_use_oauth|bool

    - name: streambox configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_config_owner:
          OWNER: stream-admin
          GROUP: stream-admin
        rclone_config_location: "/home/stream-admin/.config/rclone/rclone.conf"
        rclone_configs:
          - name: gdrive-obs
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              root_folder_id: "{{streambox_rclone_gdrive_root_folder}}"
              shared_with_me: true
              service_account_credentials: "{{streambox_rclone_gdrive_sa_token | mandatory | to_json}}"
              description: connect to gdrive using service account
      when: streambox not streambox_rclone_gdrive_use_oauth|bool

    - name: streambox create rclone systemd
      become: yes
      become_user: stream-admin
      ansible.builtin.template:
        src: rclone_systemd_user_mount.j2
        dest: "/home/stream-admin/.config/systemd/user/rclone@.service"
        owner: stream-admin
      register: setup_rclone_config

    - name: streambox register uid of stream-admin
      command: id -u stream-admin
      register: stream_admin_uid

    - name: streambox restart rclone mount
      become: yes
      become_user: stream-admin
      ansible.builtin.systemd:
        name: rclone@gdrive-obs.service    #name after the @ must match the name of the config name 
        scope: user
        daemon_reload: true
        state: restarted
        enabled: true
      environment:
        XDG_RUNTIME_DIR: /run/user/{{stream_admin_uid.stdout}}
      when: setup_rclone_config.changed

- name: streambox obs studio setup
  # https://obsproject.com/kb/linux-installation
  # https://github.com/pschmitt/obs-cli
  block:
    - name: obs studio add apt repo
      ansible.builtin.apt_repository:
        repo: ppa:obsproject/obs-studio

    - name: obs studio install
      ansible.builtin.apt:
        update_cache: yes
        name: "obs-studio={{streambox_obs_studio_version}}"
        # versions: https://launchpad.net/~obsproject/+archive/ubuntu/obs-studio

    - name: obs studio cli install
      community.general.pipx:
        name: obs-cli
        include_injected: false
        state: install
        python: 3.9

- name: streambox streamdeck setup
  ansible.builtin.import_role:
    name: streamdeck

- name: streambox set up remote desktop software
  block:
    - name: xrdp setup
      ansible.builtin.import_role:
        name: robertdebock.xrdp

    - name: x11vnc setup
      tags: vnc_x11vnc_install
      ansible.builtin.import_role:
        name: x11vnc

    - name: kasmvnc setup
      tags: kasmvnc_setup
      ansible.builtin.import_role:
        name: kasmvnc
      vars:
        kasmvnc_user: "stream-admin"
        kasmvnc_password: "{{streambox_vnc_password}}"

    - name: steambox remote tty setup
      # https://github.com/tsl0922/ttyd
      block:
        - name: ttyd install
          ansible.builtin.snap:
            name: ttyd
            classic: true

        - name: ttyd systemd service install
          ansible.builtin.template:
            src: ttyd_systemd_root_service.j2
            dest: /etc/systemd/system/ttyd.service

        - name: ttyd systemd service enable
          ansible.builtin.systemd:
            name: ttyd.service
            enabled: true
            daemon_reload: true
            state: restarted
  
- name: streambox ngrok
  import_role: ngrok

- name: install restreamer
  block:
  - name: install restreamer
    community.docker.docker_image:
      name: "datarhei/restreamer"
      tag: "latest"
      source: pull

  - name: configure and start restreamer
    debug: msg='configure restreamer'

- name: streambox primary docker compose
  tags: docker-compose
  block:
    - name: copy streambox docker compose configurations
      become_user: stream-admin
      ansible.builtin.copy:
        src: streambox-docker/
        dest: /home/stream-admin/streambox-docker/streambox

    - name: start streambox docker cluster
      community.docker.docker_compose_v2:
        project_src: /home/stream-admin/streambox-docker/streambox/


- name: reboot
  ansible.builtin.reboot:
  when: false