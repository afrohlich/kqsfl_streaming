- name: test
  command: whoami

- name: create essential users
  block:
    - name: create admin user
      ansible.builtin.user:
        name: stream-admin
        shell: /bin/bash

    - name: create admin user systemd directory
      ansible.builtin.file:
        path: "/home/stream-admin/.config/systemd/user/"
        state: directory
        owner: stream-admin

    - name: create basic user
      ansible.builtin.user:
        name: stream-user
        shell: /bin/bash

    - name: create basic user systemd directory
      ansible.builtin.file:
        path: "/home/stream-user/.config/systemd/user/"
        state: directory
        owner: stream-user

- name: install basic management tools
  block:
    - name: install networking tools
      ansible.builtin.apt:
        pkg:
          - vim
          - screen
          - tmux
          - net-tools
        update_cache: true

- name: install docker
  block:
    - name: install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-setuptools
        state: latest
        update_cache: true

    - name: add an apt signing key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: install docker module for python
      pip:
        name: docker

- name: configure google drive sync for obs backups
  block:
    - name: install rclone dependencies
      ansible.builtin.apt:
        pkg: fuse3

    - name: install rclone
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
      vars:
        rclone_version: "{{streambox_rclone_version}}"
        # Versions listed at https://github.com/rclone/rclone/releases

    - name: create mount point
      file:
        path: "{{streambox_rclone_gdrive_mount_point}}"
        state: directory
        owner: stream-admin

    - name: configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_config_owner:
          OWNER: stream-admin
          GROUP: stream-admin
        rclone_config_location: "/home/stream-admin/.config/rclone/rclone.conf"
        rclone_configs:
          - name: gdrive-obs
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              root_folder_id: "{{streambox_rclone_gdrive_root_folder}}"
              client_id: "{{streambox_rclone_gdrive_client_id  | mandatory}}"
              client_secret: "{{streambox_rclone_gdrive_client_secret  | mandatory}}"
              token: "{{streambox_rclone_gdrive_oauth_token  | mandatory | to_json}}"
              description: connect to gdrive using oauth as a real authorized user
      when: streambox_rclone_gdrive_use_oauth|bool

    - name: configure rclone with GDrive mount
      ansible.builtin.include_role:
        name: stefangweichinger.ansible_rclone
        # https://rclone.org/drive/#making-your-own-client-id
      vars:
        rclone_config_owner:
          OWNER: stream-admin
          GROUP: stream-admin
        rclone_config_location: "/home/stream-admin/.config/rclone/rclone.conf"
        rclone_configs:
          - name: gdrive-obs
            properties:
              type: drive
              scope: drive
              metadata_labels: read,write
              root_folder_id: "{{streambox_rclone_gdrive_root_folder}}"
              shared_with_me: true
              service_account_file: "{{streambox_rclone_gdrive_sa_cred_filename  | mandatory}}"
              service_account_credentials: "{{streambox_rclone_gdrive_sa_token | mandatory}}"
              description: connect to gdrive using service account
      when: not streambox_rclone_gdrive_use_oauth|bool

    - name: create rclone systemd
      become: yes
      become_user: stream-admin
      ansible.builtin.template:
        src: rclone_systemd_user_mount.j2
        dest: "{{ lookup('env', 'HOME') }}/.config/systemd/user/rclone@.service"
        owner: stream-admin
      register: setup_rclone_config

    - name: register uid of stream-admin
      command: id -u stream-admin
      register: stream_admin_uid

    - name: restart rclone mount
      become: yes
      become_user: stream-admin
      ansible.builtin.systemd:
        name: rclone@gdrive-obs.service    #name after the @ must match the name of the config name 
        scope: user
        daemon_reload: true
        state: restarted
        enabled: true
      environment:
        XDG_RUNTIME_DIR: /run/user/{{stream_admin_uid.stdout}}
      when: setup_rclone_config.changed

- name: install obs studio
  # https://obsproject.com/kb/linux-installation
  block:
    - name: obs studio add apt repo
      ansible.builtin.apt_repository:
        repo: ppa:obsproject/obs-studio

    - name: obs studio install
      ansible.builtin.apt:
        update_cache: yes
        name: "obs-studio={{streambox_obs_studio_version}}"
        # versions: https://launchpad.net/~obsproject/+archive/ubuntu/obs-studio

- name: install restreamer
  block:
  - name: install restreamer
    community.docker.docker_image:
      name: "datarhei/restreamer"
      tag: "latest"
      source: pull

  - name: configure and start restreamer
    debug: msg='configure restreamer'

- name: set up remote desktop software
  block:
    - name: xrdp setup
      block:

        - name: install xrdp
          ansible.builtin.apt:
            pkg: xrdp
            state: present

        - name: configure xrdp
          debug: msg="todo"  

    - name: x11vnc setup
      tags: vnc_x11vnc_install
      block:
        # https://github.com/LibVNC/x11vnc?tab=readme-ov-file#how-to-use-x11vnc
        # https://wiki.archlinux.org/title/X11vnc
        - name: install x11vnc
          ansible.builtin.apt:
            pkg: x11vnc
            update_cache: yes

        - name: x11vnc systemd service directory
          ansible.builtin.file:
            path: /etc/systemd/system/x11vnc.service.d/
            state: directory

        - name: x11vnc systemd service
          template:
            src: x11vnc_systemd_service.j2
            dest: /etc/systemd/system/x11vnc.service.d/override.conf

        - name: start x11vnc
          ansible.builtin.systemd:
            service: x11vnc.service
            state: restart
            enabled: true
            daemon_reload: true

    - name: kasmvnc setup
      tags: kasmvnc_setup
      block:
        - name: kasmvnc get current release
          ansible.builtin.get_url:
            url: https://github.com/kasmtech/KasmVNC/releases/download/v{{kasmvnc_version}}/kasmvncserver_{{ansible_distribution_release}}_{{kasmvnc_version}}_amd64.deb
            dest: /tmp/kasmvnc.deb

        - name: kasmvnc install current release
          ansible.builtin.apt:
            deb: /tmp/kasmvnc.deb

        - name: kasmvnc configure user password
          become: yes
          become_user: stream-admin
          ansible.builtin.shell: |
            echo -e '{{vnc_password}}\n{{vnc_password}}\n' | vncpasswd  -u stream-admin -w -r

        - name: create admin user vnc config directory
          ansible.builtin.file:
            path: "/home/stream-admin/.vnc"
            state: directory
            owner: stream-admin

        - name: kasmvnc vnc config
          ansible.builtin.template:
            src: kasmvnc_user_config.j2
            dest: .vnc/kasmvnc.yaml 
            owner: stream-admin

        - name: create basic user systemd directory
          ansible.builtin.file:
            path: "/home/stream-admin/.config/systemd/user/"
            state: directory
            owner: stream-admin

        - name: kasmvnc configure systemd service
          ansible.builtin.template:
            src: kasmvnc_user_systemd_service.j2
            dest: .vnc/kasmvnc.yaml 
            owner: stream-admin

        - name: kasmvnc enable systemd service

    - name: guac setup
      tags: guac_setup
      block:
        # This should be docker compose (https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html)
        # https://guacamole.apache.org/doc/1.5.5/gug/guacamole-docker.html#running-the-guacd-docker-image
      

        - name: prepare guacamole server
          script: files/guacamole-docker/prepare.sh

        - name: start guacamole docker cluster
          community.docker.docker_compose_v2:
            project_src: files/guacamole-docker         

        - name: setup connections
          script: files/guacamole-docker/configure_connections.sh

- name: install reverse proxy tunnel for external access
  block:
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/
    
    - name: ngrok setup
      tags: ngrok_setup
      block:
        - name: ngrok get repo key
          ansible.builtin.apt_key:
            url: https://ngrok-agent.s3.amazonaws.com/ngrok.asc
            keyring: /etc/apt/trusted.gpg.d/ngrok.asc

        - name: ngrok add repo
          ansible.builtin.apt_repository:
            repo: "deb [trusted=yes signed-by=/etc/apt/trusted.gpg.d/ngrok.asc] https://ngrok-agent.s3.amazonaws.com {{ ansible_distribution_release }} stable"
            state: present
            
        - name: ngrok make config dir
          ansible.builtin.apt:
            pkg: ngrok
            update_cache: true
            
        - name: ngrok make config dir
          become: yes
          become_user: stream-admin
          ansible.builtin.file:
            path: "{{ lookup('env', 'HOME') }}/.config/ngrok/"
            state: directory

        - name: ngrok user config setup
          become: yes
          become_user: stream-admin
          template:
            src: ngrok_user_config.j2
            dest: "{{ lookup('env', 'HOME') }}/.config/ngrok/ngrok.yml"

        - name: ngrok user systemd service
          become: yes
          become_user: stream-admin
          template:
            src: ngrok_systemd_user_service.j2
            dest: "{{ lookup('env', 'HOME') }}/.config/systemd/user/ngrok@.service"
          register: setup_ngrok_config

        - name: register uid of stream-admin
          command: id -u stream-admin
          register: stream_admin_uid

        - name: restart ngrok service
          become: yes
          become_user: stream-admin
          ansible.builtin.systemd:
            name: ngrok@kasmvnc.service    #name after the @ must match the name of the endpoint in the config 
            scope: user
            daemon_reload: true
            state: restarted
            enabled: true
          environment:
            XDG_RUNTIME_DIR: /run/user/{{stream_admin_uid.stdout}}
          when: setup_ngrok_config.changed

    - name: cloudflared setup
      block:
        # https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/
        - name: get cloudflare repo apt key
          ansible.builtin.apt_key:
            url: https://pkg.cloudflare.com/cloudflare-main.gpg 
            state: present

        - name: cloudflared add apt repo remove
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared noble main"
            state: absent

        - name: cloudflared add apt repo
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared jammy main"
              # ubuntu 24 "noble" does not have an official release.
              # See github issue
              # Temporarily using 'jammy'
              # https://github.com/cloudflare/cloudflared/issues/1235

        - name: install cloudflared
          ansible.builtin.apt:
            name: cloudflared
            state: present
            update_cache: yes

        - name: create cloudflare tunnel config
          debug: msg='To Do'
          when: false

        - name: install cloudflare tunnel service
          shell: cloudflared install service
          when: false


- name: install nginx public-facing web server
  block:
    - name: nginx setup
      block:
        #- name: install nginx
        #- name: configure nginx
        #- name: configure nginx services