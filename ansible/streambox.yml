---
- name: configure streambox server
  hosts: localhost
  # run locally using the following command
  # ansible-playbook -K -u "$USER" -c local streambox.yml
  connection: local
  become: yes
  become_user: root
  vars_files:
    - "{{ lookup('env', 'HOME') }}/.streambox_vars.yml"
    - "{{ lookup('env', 'HOME') }}/.streambox_credentials.yml"

  tasks:
    - name: test
      command: whoami

    - name: test vars
      debug:
        msg: "{{stream_user_username}}"

    - name: install basic management tools
      block:
        - name: install networking tools
          ansible.builtin.apt:
            pkg:
              - vim
              - screen
              - tmux
              - net-tools
            update_cache: true

    - name: install docker
      block:
        - name: install required system packages
          ansible.builtin.apt:
            pkg:
              - apt-transport-https
              - ca-certificates
              - curl
              - software-properties-common
              - python3-pip
              - virtualenv
              - python3-setuptools
            state: latest
            update_cache: true

        - name: Add an Apt signing key, uses whichever key is at the URL
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: add docker repository
          ansible.builtin.apt_repository:
            repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

        - name: update apt and install docker-ce
          ansible.builtin.apt:
            name: docker-ce
            state: latest
            update_cache: true

        - name: install docker module for python
          pip:
            name: docker

    - name: configure google drive sync
      block:
        - name: install rclone
          ansible.builtin.include_role:
            name: stefangweichinger.ansible_rclone
          vars:
            rclone_version: "1.68.1"
            # Versions listed at https://github.com/rclone/rclone/releases

        - name: create mount point
          file:
            path: /opt/kqsfl-stream/local-recording-backups
            state: directory  

        - name: configure rclone with GDrive mount
          ansible.builtin.include_role:
            name: stefangweichinger.ansible_rclone
          vars:
            rclone_configs:
              - name: google-drive
                properties:
                  type: drive
                  token: 
                  client_id: 
                  client_secret:
          when: false # Temporarily disabling until credentials are available for testing

        - name: Restart rclone
          ansible.builtin.systemd:
            name: rclone.service
            state: restarted
          when: setup_rclone_config.changed

    - name: install obs studio
      # https://obsproject.com/kb/linux-installation
      block:
        - name: obs studio add apt repo
          ansible.builtin.apt_repository:
            repo: ppa:obsproject/obs-studio

        - name: obs studio install
          ansible.builtin.apt:
            update_cache: yes
            name: "obs-studio=30.2.3-0obsproject1~{{ ansible_distribution_release }}"
            # versions: https://launchpad.net/~obsproject/+archive/ubuntu/obs-studio

    - name: install restreamer
      block:
      - name: install restreamer
        community.docker.docker_image:
          name: "datarhei/restreamer"
          tag: "latest"
          source: pull

      - name: configure and start restreamer
        debug: msg='configure restreamer'

    - name: install reverse proxy tunnel for external access
      block:
        # https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-remote-tunnel/
        
        - name: get cloudflare repo apt key
          ansible.builtin.apt_key:
            url: https://pkg.cloudflare.com/cloudflare-main.gpg 
            state: present

        - name: cloudflared add apt repo remove
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared noble main"
            state: absent

        - name: cloudflared add apt repo
          ansible.builtin.apt_repository:
            repo: "deb https://pkg.cloudflare.com/cloudflared jammy main"
              # ubuntu 24 "noble" does not have an official release.
              # See github issue
              # Temporarily using 'jammy'
              # https://github.com/cloudflare/cloudflared/issues/1235

        - name: install cloudflared
          ansible.builtin.apt:
            name: cloudflared
            state: present
            update_cache: yes

        - name: create cloudflare tunnel config
          debug: msg='To Do'
          when: false

        - name: install cloudflare tunnel service
          shell: cloudflared install service
          when: false

    - name: set up remote desktop software
      block:
        - name: gnome remote desktop setup
          block:
            # This will set up the default ubuntu RDP server for the stream user account
            # The server is not encrypted and is intended to be used over an SSH Tunnel
            # Same-user RDP (shared session) is on port 3389
            # A completely new login session can be created by connecting to port 3390. This feature must be enabled via the GUI

            - name: install gnome remote desktop
              ansible.builtin.apt:
                pkg: gnome-remote-desktop
                update_cache: yes

            - name: grd get status
              become_user: "{{stream_user_username}}"
              become: yes
              shell: grdctl status

            - name: grd set user rdp credentials
              become_user: "{{stream_user_username}}"
              become: yes
              shell: |
                grdctl rdp enable
                grdctl rdp set-credentials {{stream_user_username}} {{stream_user_password}}
                grdctl rdp enable-view-only

            - name: grd set system rdp credentials
              become_user: root
              become: yes
              shell: |
                grdctl --system rdp enable
                grdctl --system rdp set-credentials {{stream_user_username}} {{stream_user_password}}

        - name: x11vnc setup
          block:
            # https://github.com/LibVNC/x11vnc?tab=readme-ov-file#how-to-use-x11vnc
            - name: install x11vnc
              ansible.builtin.apt:
                pkg: x11vnc
                update_cache: yes

            - name: start x11vnc
              shell: |
                x11vnc -display :0


        - name: tightvnc setup
          when: false
          block:
            - name: install vnc server and dependencies
              # https://help.ubuntu.com/community/VNC/Servers
              ansible.builtin.apt:
                pkg:
                  - tightvncserver
                state: present
                update_cache: yes

            # - name: configure vnc
            #  etc/tightvncserver.conf 

            - name: create vnc server
              shell: echo 'setup tightvnc'

        - name: guac setup
          block:
            # This should be docker compose (https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html)
            # https://guacamole.apache.org/doc/1.5.5/gug/guacamole-docker.html#running-the-guacd-docker-image
            
            - name: start postgres for guacamole auth db
              community.docker.docker_image:
                name: "postgres"
                tag: "latest"
                source: pull

            - name: start guacd service
              community.docker.docker_image:
                name: "guacamole/guacd"
                tag: "latest"
                source: pull

            - name: start guacamole server
              community.docker.docker_image:
                name: "guacamole/guacamole"
                tag: "latest"
                source: pull

        - name: rustdesk setup
          # https://rustdesk.com/docs/en/self-host/rustdesk-server-oss/docker/
          block:
            - name: todo
            - debug: msg='todo'

